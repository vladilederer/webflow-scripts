(() => {
    var R = ({ customFormFields: t = {} }) => {
        let r = {
            rl_utm_source: t?.source || "rl_utm_source",
            rl_utm_medium: t?.medium || "rl_utm_medium",
            rl_utm_campaign: t?.campaign || "rl_utm_campaign",
            rl_utm_content: t?.content || "rl_utm_content",
            rl_utm_term: t?.term || "rl_utm_term",
            rl_hsa_ad: t?.ad || "rl_hsa_ad",
            rl_hsa_cam: t?.cam || "rl_hsa_cam",
            rl_hsa_grp: t?.grp || "rl_hsa_grp",
            rl_campaign_id: t?.campaign_id || "rl_campaign_id",  
            rl_add_id_1: t?.add_id_1 || "rl_add_id_1",          
            rl_add_id_2: t?.add_id_2 || "rl_add_id_2",          
            rl_account_id: t?.account_id || "rl_account_id",    
        },
        m = Object.values(r),
        n = {
            [r.rl_utm_source]: e.utm_source,
            [r.rl_utm_medium]: e.utm_medium,
            [r.rl_utm_campaign]: e.utm_campaign,
            [r.rl_utm_content]: e.utm_content,
            [r.rl_utm_term]: e.utm_term,
            [r.rl_hsa_ad]: e.hsa_ad,
            [r.rl_hsa_cam]: e.hsa_cam,
            [r.rl_hsa_grp]: e.hsa_grp,
            [r.rl_campaign_id]: e.campaign_id,    
            [r.rl_add_id_1]: e.add_id_1,          
            [r.rl_add_id_2]: e.add_id_2,          
            [r.rl_account_id]: e.account_id,      
        };
        return {
            FORM_FIELD_IDS_MAP: r,
            FORM_FIELD_IDS_LIST: m,
            FORM_FIELD_IDS_TO_UTM_MAP: n
        };
    },
    e = {
        utm_source: "utm_source",
        utm_medium: "utm_medium",
        utm_campaign: "utm_campaign",
        utm_term: "utm_term",
        utm_content: "utm_content",
        hsa_ad: "hsa_ad",
        hsa_cam: "hsa_cam",
        hsa_grp: "hsa_grp",
        campaign_id: "campaign_id",    
        add_id_1: "add_id_1",          
        add_id_2: "add_id_2",          
        account_id: "account_id",      
    },
    f = Object.values(e),
    g = ["www.google.com", "google.com", "www.bing.com", "bing.com", "www.yahoo.com", "yahoo.com"],
    d = ["www.facebook.com", "facebook.com", "www.twitter.com", "twitter.com", "www.linkedin.com", "linkedin.com"],
    A = [...g, ...d],
    _ = "session",
    l = {
        [e.utm_source]: "Direct",
        [e.utm_medium]: "Direct",
        [e.utm_campaign]: "Not Provided",
        [e.utm_term]: "",
        [e.utm_content]: "",
        [e.hsa_ad]: "",
        [e.hsa_cam]: "",
        [e.hsa_grp]: "",
        [e.campaign_id]: "",     
        [e.add_id_1]: "",        
        [e.add_id_2]: "",        
        [e.account_id]: "",      
    },
    S = {
        [e.utm_source]: "Web Referral",
        [e.utm_medium]: "",
        [e.utm_campaign]: "Not Provided",
        [e.utm_term]: "",
        [e.utm_content]: "",
        [e.hsa_ad]: "",
        [e.hsa_cam]: "",
        [e.hsa_grp]: "",
        [e.campaign_id]: "",     
        [e.add_id_1]: "",        
        [e.add_id_2]: "",       
        [e.account_id]: "",     
    };
    function E(t) {
        return {
            [e.utm_source]: t.get(e.utm_source),
            [e.utm_medium]: t.get(e.utm_medium),
            [e.utm_campaign]: t.get(e.utm_campaign),
            [e.utm_term]: t.get(e.utm_term),
            [e.utm_content]: t.get(e.utm_content),
            [e.hsa_ad]: t.get(e.hsa_ad),
            [e.hsa_cam]: t.get(e.hsa_cam),
            [e.hsa_grp]: t.get(e.hsa_grp),
            [e.campaign_id]: t.get(e.campaign_id),    
            [e.add_id_1]: t.get(e.add_id_1),          
            [e.add_id_2]: t.get(e.add_id_2),          
            [e.account_id]: t.get(e.account_id),      
        };
    }
    function D(t) {
        let r = E(t);
        return f.some(m => r[m])
    }
    function I() {
        let t = document.referrer ? new URL(document.referrer).hostname : null,
            r = location.href ? new URL(location.href).hostname : null;
        return !(!document.referrer || r == t)
    }
    function x(t) {
        return {
            [e.utm_source]: t.get(e.utm_source) || l[e.utm_source],
            [e.utm_medium]: t.get(e.utm_medium) || l[e.utm_medium],
            [e.utm_campaign]: t.get(e.utm_campaign) || l[e.utm_campaign],
            [e.utm_term]: t.get(e.utm_term) || l[e.utm_term],
            [e.utm_content]: t.get(e.utm_content) || l[e.utm_content],
            [e.hsa_ad]: t.get(e.hsa_ad) || l[e.hsa_ad],
            [e.hsa_cam]: t.get(e.hsa_cam) || l[e.hsa_cam],
            [e.hsa_grp]: t.get(e.hsa_grp) || l[e.hsa_grp],
            [e.campaign_id]: t.get(e.campaign_id) || l[e.campaign_id],   
            [e.add_id_1]: t.get(e.add_id_1) || l[e.add_id_1],             
            [e.add_id_2]: t.get(e.add_id_2) || l[e.add_id_2],             
            [e.account_id]: t.get(e.account_id) || l[e.account_id],        
        };
    }
    function O() {
        let t = JSON.parse(localStorage.getItem(_));
        if (!t) return !0;
        let r = new Date(t.expirationDate);
        return new Date > r;
    }
    function p() {
        let t = JSON.parse(localStorage.getItem(_));
        return t ? t.utm : {};
    }
    function P({ sessionExpirationTime: t }) {
        let r = new URLSearchParams(window.location.search);
        D(r) ? L({ params: r, sessionExpirationTime: t }) : I() ? N({ sessionExpirationTime: t }) : O() ? w({ utmParams: x(r), sessionExpirationTime: t }) : F(t);
    }
    function M(t) {
        let r = new Date;
        return r.setMinutes(r.getMinutes() + t), r;
    }
    function F(t) {
        let m = { ...JSON.parse(localStorage.getItem(_)), expirationDate: M(t) };
        localStorage.setItem(_, JSON.stringify(m))
    }
    function w({ utmParams: t, sessionExpirationTime: r }) {
        let m = { utm: t, expirationDate: M(r) };
        localStorage.setItem(_, JSON.stringify(m));

        // PostMessage hinzugefÃ¼gt, um UTM-Parameter an das Paperform-iFrame zu senden
        var iframe = document.querySelector('iframe'); // Stelle sicher, dass dies das richtige iFrame ist
        if (iframe) {
            iframe.contentWindow.postMessage(t, '*');
        }
    }
    function L({ params: t, sessionExpirationTime: r }) {
        let m = E(t);
        w({ utmParams: m, sessionExpirationTime: r });
    }
    function N({ referrer: t = "", sessionExpirationTime: r }) {
        let m = window.location.host,
            n = t || new URL(document.referrer).host,
            o = m === n ? "Direct" : n,
            c, s, i, a;
        A.includes(o) ? (d.includes(o) ? c = "Organic Social" : g.includes(o) && (c = "Organic Search"), o = o.replace(".com", "").replace("www.", "")) : c = "Web Referral";
        let u = {
            [e.utm_source]: o || S[e.utm_source],
            [e.utm_medium]: c || S[e.utm_medium],
            [e.utm_campaign]: s || S[e.utm_campaign],
            [e.utm_term]: i || S[e.utm_term],
            [e.utm_content]: a || S[e.utm_content],
            [e.hsa_ad]: S[e.hsa_ad],
            [e.hsa_cam]: S[e.hsa_cam],
            [e.hsa_grp]: S[e.hsa_grp],
            [e.campaign_id]: S[e.campaign_id],    // New parameter
            [e.add_id_1]: S[e.add_id_1],          // New parameter
            [e.add_id_2]: S[e.add_id_2],          // New parameter
            [e.account_id]: S[e.account_id],      // New parameter
        };
        w({ utmParams: u, sessionExpirationTime: r });
    }
    function T({ container: t, inputSelectType: r = "name", customFormFields: m = {} }) {
        let { FORM_FIELD_IDS_LIST: n, FORM_FIELD_IDS_TO_UTM_MAP: o } = R({ customFormFields: m }),
            c = p();
        n.forEach(s => {
            let i = t || "";
            r === "className" ? i += ` input.${s}` : r === "name" ? i += ` input[name='${s}']` : r === "id" && (i += ` input#${s}`);
            let a = document.querySelectorAll(i.trim());
            for (let u = 0; u < frames.length; u++) try {
                let h = frames[u].document.querySelectorAll(i.trim());
                a = [...a, ...h];
            } catch { }
            for (let u of a) u.value = c[o[s]] || "";
        })
    }
    function U(t) {
        let r = H();
        y(r, t);
    }
    function H() {
        return document.getElementsByTagName("a")
    }
    function y(t, r) {
        let m = p();
        Array.from(t).forEach(n => {
            if (n.hostname && r.includes(n.hostname)) {
                let o = new URLSearchParams(n.search);
                f.forEach(c => {
                    m[c] && o.set(c, m[c])
                }), n.search = o;
            }
        });
    }
    var G = (() => {
        let t = {
            sessionExpirationTime: 30,
            inputSelectType: "name",
            container: "",
            customFormFields: {},
            appendHostnames: [],
        }, r = !1;
        async function m(n) {
            t = { ...t, ...n };
            let { sessionExpirationTime: o, inputSelectType: c, customFormFields: s, container: i, appendHostnames: a } = t;
            P({ sessionExpirationTime: o });
            let u = { inputSelectType: c, customFormFields: s, container: i };
            r ? (T(u), U(a)) : (r = !0, window.addEventListener("load", () => { T(u), U(a) }))
        }
        return {
            init: m,
            customInit: n => {
                if (!n?.container) throw new Error("container param is required");
                m(n || t)
            }
        };
    })();
    window.UtmTags || (window.UtmTags = G);
})();
function appendUTMToButtonLinks() {
    // Hole die Session-Daten aus dem LocalStorage unter dem Key "session"
    let sessionData = localStorage.getItem('session');
    let utmParams = {};

    // Debugging: Protokolliere die Session-Daten
    console.log('Session-Daten im localStorage:', sessionData);

    if (sessionData) {
        let parsedSession = JSON.parse(sessionData);
        if (parsedSession && parsedSession.utm) {
            utmParams = {
                utm_source: parsedSession.utm.utm_source || '',
                utm_campaign: parsedSession.utm.utm_campaign || '',
                utm_ad: parsedSession.utm.utm_ad || '',
                utm_term: parsedSession.utm.utm_term || '',
                utm_content: parsedSession.utm.utm_content || '',
                utm_medium: parsedSession.utm.utm_medium || '',
                hsa_ad: parsedSession.utm.hsa_ad || '',
                hsa_cam: parsedSession.utm.hsa_cam || '',
                hsa_grp: parsedSession.utm.hsa_grp || ''
            };

            // Debugging: Protokolliere die UTM-Parameter
            console.log('UTM-Parameter aus der Session:', utmParams);
        } else {
            console.log('Keine UTM-Parameter in der Session gefunden.');
        }
    } else {
        console.log('Session-Daten im localStorage unter dem Key "session" nicht gefunden.');
    }

    // Liste der Button-Klassen, die wir beobachten wollen
    let buttonClasses = [
        'button-copy w-button',   // Button: "Mehr erfahren"
        'yellow-btn w-button',    // Button: "Jetzt Zusammenarbeit anfragen"
        'yellow-btn width w-button'  // Button: "Jetzt anfragen"
    ];

    // Gehe durch alle Button-Klassen und hÃ¤nge die UTM-Parameter an die URL
    buttonClasses.forEach(buttonClass => {
        let buttons = document.querySelectorAll(`.${buttonClass}`);

        // Debugging: Protokolliere die gefundenen Buttons
        console.log(`Buttons mit der Klasse ${buttonClass}:`, buttons);

        buttons.forEach(button => {
            button.addEventListener('click', function(event) {
                // Verhindere den Standard-Klick
                event.preventDefault();

                // Debugging: Protokolliere, dass der Button-Klick erfasst wurde
                console.log(`Button mit Text "${button.textContent}" wurde geklickt.`);

                // Erstelle URLSearchParams aus den UTM-Parametern
                let url = new URL(button.href, window.location.origin);
                let urlParams = new URLSearchParams(url.search);

                // UTM-Parameter zur URL hinzufÃ¼gen
                for (let [key, value] of Object.entries(utmParams)) {
                    if (value) {
                        urlParams.set(key, value);
                    }
                }

                // Debugging: Protokolliere die neue URL mit den UTM-Parametern
                url.search = urlParams.toString();
                let finalURL = url.toString();
                console.log('Neue URL:', finalURL);

                // Umleiten zur neuen URL mit UTM-Parametern
                window.location.href = finalURL;
            });
        });
    });
}

// Starte die Funktion nach dem Laden der Seite
window.addEventListener('load', function() {
    console.log('Page fully loaded. Running appendUTMToButtonLinks.');
    appendUTMToButtonLinks();
});











